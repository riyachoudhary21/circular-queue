ALGORITHM : 
Enqueue Operation 
1. check if the queue is full 
2. for the first element, set value of FRONT to 0 
3. circularly increase the REAR index by 1 (i.e. if the rear reaches the end, next it would be at the start of the queue) 
4. add the new element in the position pointed to by REAR 
Dequeue Operation 
1. check if the queue is empty 
2. return the value pointed by FRONT 
3. circularly increase the FRONT index by 1 
4. for the last element, reset the values of FRONT and REAR to -1
#include <stdio.h>  
  
# define max 6  
int queue[max];    
int front=-1;  
int rear=-1;  
void enqueue(int element)  
{  
    if(front==-1 && rear==-1)     
    {  
        front=0;  
        rear=0;  
        queue[rear]=element;  
    }  
    else if((rear+1)%max==front)  
    {  
        printf("Queue is overflow");  
    }  
    else  
    {  
        rear=(rear+1)%max;         
        queue[rear]=element;      
    }  
}  

int dequeue()  
{  
    if((front==-1) && (rear==-1)) 
    {  
        printf("\nQueue is underflow");  
    }  
 else if(front==rear)  
{  
   printf("\nThe dequeued element is %d", queue[front]);  
   front=-1;  
   rear=-1;  
}   
else  
{  
    printf("\nThe dequeued element is %d", queue[front]);  
   front=(front+1)%max;  
}  
}  
void display()  
{  
    int i=front;  
    if(front==-1 && rear==-1)  
    {  
        printf("\n Queue is empty..");  
    }  
    else  
    {  
        printf("\nElements in a Queue are :");  
        while(i<=rear)  
        {  
            printf("%d,", queue[i]);  
            i=(i+1)%max;  
        }  
    }  
}  
int main()  
{  
    int choice=1,x;  
    while(choice<4 && choice!=0)     
    {  
    printf("\n Press 1: Insert an element");  
    printf("\nPress 2: Delete an element");  
    printf("\nPress 3: Display the element");  
    printf("\nEnter your choice");  
    scanf("%d", &choice);  
      
    switch(choice)  
    {  
          
        case 1:  
      
        printf("Enter the element which is to be inserted");  
        scanf("%d", &x);  
        enqueue(x);  
        break;  
        case 2:  
        dequeue();  
        break;  
        case 3:  
        display();  
  
    }}  
    return 0;  
}  


code :2
  #include <stdio.h>
#include <stdlib.h>
typedef struct circularQueue
{ int size;
    int f;
    int r;
    int *arr;
} C;
int isEmpty(C *q)
{
    if (q->r == q->f)
    {
        return 1;
    }
    return 0;
} int isFull(C *q)
{
    if ((q->r + 1) % q->size == q->f)
    {
        return 1;
    }
    return 0;
} void enqueue(C *q, int val)
{
    if (isFull(q))
    {
        printf("The circularQueue is full\n");
    } else
    {
        q->r = (q->r + 1) % q->size;
        q->arr[q->r] = val;
        printf("Enqueued element : %d\n", val);
    }
}

int dequeue(C *q)
{
    int a = -1;
    if (isEmpty(q))  {
        printf("This circularQueue is empty\n");
    }
    else
    {
        q->f = (q->f + 1) % q->size;
        a = q->arr[q->f];
    } return a;
}
int main()
{
    C q;
    q.size = 10;
    q.f = q.r = 0;
    q.arr = (int *)malloc(q.size * sizeof(int));
    dequeue(&q);
    enqueue(&q, 23);
    enqueue(&q, 6);
    enqueue(&q, 17);
    enqueue(&q, 35);
    enqueue(&q, 4);
    enqueue(&q, 3);
    enqueue(&q, 7);
    printf("Dequeuing element %d\n", dequeue(&q));
    printf("Dequeuing element %d\n", dequeue(&q));
    printf("Dequeuing element %d\n", dequeue(&q));
    printf("Dequeuing element %d\n", dequeue(&q));
    printf("Dequeuing element %d\n", dequeue(&q));
    printf("Dequeuing element %d\n", dequeue(&q));
    printf("Dequeuing element %d\n", dequeue(&q));
    printf("Dequeuing element %d\n", dequeue(&q));
    enqueue(&q, 1);
    enqueue(&q, 13);
    enqueue(&q, 50);
    printf("Dequeuing element %d\n", dequeue(&q));
    printf("Dequeuing element %d\n", dequeue(&q));
    printf("Dequeuing element %d\n", dequeue(&q));
    printf("Dequeuing element %d\n", dequeue(&q));
    return 0;
}
